<?php

class ObjectConverter {

     /**
      * your object to convert
      * @var $object
      * @
      */
     protected $object;
     /**
      * parameters to methods(must be multidimensional array)
      * @var array
      */
     protected $params;
     /**
      * contains methods names that will be not convert
      * @var array 
      */
     protected $notConvert;
     /**
      * member methods name that will be convert
      * @var string 
      */
     protected $member = 'get';

     /**
      * reflection method object
      * @var array
      */
     protected $methods = array();
     /**
      * method name to convert
      * @var array 
      */
     protected $methodsName = array();
     /**
      * quantity parameters which expect method converted
      * @var array
      */
     protected $quantityParams = array();
     private static $exceptionMessage = array(
         'object' => '%s is not an object',
         'not-param' => '%s expected parameter',
         'not-exists' => 'public methods %s not exists',
         'array' => '%s must be a array',
         'bad-quantity-param' => '%s bad quantity parameter in $params',
         'too-many-param' => 'your method have too many parameter - allowed 5'
     );

     /**
      * 
      * @param object $object
      * @param array $params
      * @param array $not_convert
      * @return $this
      */
     public function convert($object, $params = array(), $not_convert = array()) {

          if (!is_object($object)) {
               $this->exception('object', '$object');
          }
          if (!is_array($params)) {
               $this->exception('array', '$params');
          }
          if (!is_array($not_convert)) {
               $this->exception('array', '$not_convert');
          }
          $this->setObject($object);
          $this->setParams($params);
          $this->setNotConvert($not_convert);

          return $this->prepareDataObject();
     }

     protected function setObject($obj) {
          $this->object = $obj;
     }

     protected function setParams($params) {
          $this->params = $params;
     }

     protected function setNotConvert($not_convert) {
          $this->notConvert = array_flip($not_convert);
     }

   /**
    *  start reflection class and prepare method convert
    * @return $this|exception
    */
     protected function prepareDataObject() {

          $methods = $this->reflectionClass()->getMethods();

          for ($i = 0; $i < count($methods); $i++) {

               if ($methods[$i]->isPublic() && $this->isMember($methods[$i]->name) && $this->isConvertMethod($methods[$i]->name)) {
                    $this->methods[] = $methods[$i];
                    $this->methodsName[] = $methods[$i]->name;
                    $this->quantityParams[] = $methods[$i]->getNumberOfRequiredParameters();
               }
          }
          //are there any method to convert?
          return count($this->methodsName) > 0 ? $this : $this->exception('not-exists', $this->member);
     }

     public function toArray() {

          for ($i = 0; $i < count($this->methodsName); $i++) {

               if (0 < $this->quantityParams[$i]) {

                    $result[$this->createIndex($i)] = $this->withParams($i);
                    //return result execute method with params
               } else {
                    $result[$this->createIndex($i)] = $this->withoutParams($i);
                    //- || - without params
               }
          }

          return $result;
     }

     /**
      * return result execute method on $object
      * @param int $i
      * @return mixed
      */
     protected function withParams($i) {

          $method_name = $this->methodsName[$i];


          if (!isset($this->params[$method_name])) {
               $this->exception('not-param', $method_name);
          }

          $params = $this->params[$method_name];

          if ($this->quantityParams[$i] == count($this->params[$method_name])) {

               switch ($this->quantityParams[$i]) {
                    case 1 : return $this->object->$method_name($params[0]);
                         break;
                    case 2 : return $this->object->$method_name($params[0], $params[1]);
                         break;
                    case 3 : return $this->object->$method_name($params[0], $params[1], $params[2]);
                         break;
                    case 4 : return $this->object->$method_name($params[0], $params[1], $params[2], $params[3]);
                         break;
                    case 5 : return $this->object->$method_name($params[0], $params[1], $params[2], $params[3], $params[4]);
                         break;
                    default : $this->exception('too-many-param', $method_name);
               }
          } else {
               $this->exception('bad-quantity-param');
          }
     }

     protected function reflectionClass() {
          return new \ReflectionClass($this->object);
     }

     /**
      *  return result execute method on $object
      * @param int $i
      * @return mixed
      */
     protected function withoutParams($i) {

          $method_name = $this->methodsName[$i];

          return $this->object->$method_name();
     }

     /**
      * create index to your result array
      * @param integer $i
      * @return string
      */
     protected function createIndex($i) {

          return strtolower(preg_replace('![a-z]\K(?=[A-Z])!', '_', substr($this->methodsName[$i], strlen($this->member))));
     }

     /**
      * check, or method which will be converted is not exists in $notCovert array
      * @param string $method
      * @return bool
      */
     protected function isConvertMethod($method) {

          return !isset($this->notConvert[$method]);
     }

     /**
      * check, or method which will be converted equals the name of the member
      * @param string $method
      * @return bool
      */
     protected function isMember($method) {

          return $this->member == substr($method, 0, strlen($this->member));
     }

     /**
      * @param string $member
      * @return $this
      */
     public function setMemberNameMethods($member) {

          $this->member = $member;
          return $this;
     }

     /**
      * @param string $index
      * @param string $var_name
      * @throws Exception
      */
     protected function exception($index, $var_name = null) {

          throw new Exception(sprintf(self::$exceptionMessage[$index], $var_name));
     }

}
?>
 

